This final lesson of the module looks at Secrets in more details. Just like ConfigMaps, Secrets
pass information to pods. Secrets are similar
to ConfigMaps, but it's a convention that Kubernetes applications
use Secrets rather than ConfigMaps to store sensitive information
such as passwords, tokens, and SSH keys. Secrets let you manage sensitive information in
their own control plane. Secrets also helped
to ensure Kubernetes doesn't accidentally
output these data to logs. In spite of the name Kubernetes, Secrets are not truly secrets. If your application is
managing high-value assets or if you face stringent
regulatory requirements, you should consider
key management systems like Google Cloud KMS for
full secret management. There are three types of Secrets. The generic type is
used when creating secrets from files directories
or literal values. The TLS type uses an existing public-private
encryption key pair. To create one of these, you must give Kubernetes the public key certificate
encoded in PEM format, and you must also supply the private key of
that certificate. The Docker registry secret type can be used to pass
credentials for an image registry to
kubelet so it can pull a private image from the Docker registry on
behalf of your pod. In GKE, the Google
Container Registry integrates with Cloud Identity
and Access Management, so you may not need to
use this secret type. Just like ConfigMap, generic type secrets are
stored in key-value pairs. However, in Secrets, you supply values as base64 encoded strings. Be careful, base64 encoding
is not encryption. These encoded strings can then be used in secret manifest. Applying this manifest using a Cube CTL create command
creates a secret. Here are examples
of generic types. Note that files should
have single entries. All the entries are
packaged together with file names as keys and
entries inside as values. Keys can also be named. You might have noticed that
this is similar to ConfigMap. One difference, however, is that encoded strings aren't visible
in the GCP Console and encoded strings on
displayed when you use the Cube CTL get or
describe commands. Secrets can be consumed as environment variables in
a pod by its containers. Here's an example where two environment variables:
SECRET_USERNAME, and SECRET_ PASSWORD are created. These variables are
referenced to a secret named demo-secret
along with their keys. These variables are
automatically decoded. Secrets can also be consumed by creating a secret
volume in a pod. Here, a secret volume
named storagesecrets is created and referred to a
secret named demo-secret. This volume is mounted to the container with
read-only access. This volume can be used by multiple containers
within the pod. Secret keys can be projected
to a specific path. In this case, a password key of secret will not be projected. If a password keys required, it must also be listed
under the items field. Just like ConfigMap,
kubelet periodically syncs with Secrets to keep
a secret volume updated. If a secret that is already attached as a volume is changed, the keys and values are
eventually updated.